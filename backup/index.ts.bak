import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import rateLimit from 'express-rate-limit';
import { config } from 'dotenv';
import apiRoutes from './routes/index.js';

// 환경 변수 로드
config();

const app = express();
const PORT = process.env.PORT || 3000;

// 보안 미들웨어
app.use(helmet());

// CORS 설정
app.use(cors({
  origin: process.env.CORS_ORIGIN || 'http://localhost:3000',
  credentials: true
}));

// Rate limiting
const limiter = rateLimit({
  windowMs: parseInt(process.env.RATE_LIMIT_WINDOW_MS || '900000'), // 15분
  max: parseInt(process.env.RATE_LIMIT_MAX_REQUESTS || '100'), // 최대 100개 요청
  message: {
    success: false,
    error: '요청 한도를 초과했습니다. 잠시 후 다시 시도해주세요.'
  }
});

app.use(limiter);

// JSON 파싱 미들웨어 (큰 이미지 파일을 위해 limit 증가)
app.use(express.json({ limit: '15mb' }));
app.use(express.urlencoded({ extended: true, limit: '15mb' }));

// 정적 파일 제공
app.use(express.static('public'));

// API 라우터
app.use('/api', apiRoutes);

// 루트 경로
app.get('/', (req, res) => {
  res.json({
    success: true,
    message: 'Face Analysis AI Tool - 관상 분석 AI 도구',
    version: '1.0.0',
    status: 'running',
    endpoints: {
      api: '/api',
      face: '/api/face'
    }
  });
});

// 404 핸들러
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Page not found'
  });
});

// 글로벌 에러 핸들러
app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {
  console.error('Global error handler:', err);
  
  res.status(err.status || 500).json({
    success: false,
    error: err.message || 'Internal server error',
    ...(process.env.NODE_ENV === 'development' && { stack: err.stack })
  });
});

// 서버 시작
app.listen(PORT, () => {
  console.log(`🚀 Face Analysis AI Tool server running on port ${PORT}`);
  console.log(`📱 Environment: ${process.env.NODE_ENV || 'development'}`);
  console.log(`🔗 Access: http://localhost:${PORT}`);
  console.log(`📋 API: http://localhost:${PORT}/api`);
});

// 프로세스 종료 시 정리
process.on('SIGTERM', () => {
  console.log('SIGTERM received, shutting down gracefully');
  process.exit(0);
});

process.on('SIGINT', () => {
  console.log('SIGINT received, shutting down gracefully');
  process.exit(0);
});

export default app;